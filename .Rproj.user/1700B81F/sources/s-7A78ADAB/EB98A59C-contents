rm(list=ls())

###setwd("C:/Users/Rozeta/Documents/GitHub/SDPDmod")
library("devtools")
library("roxygen2")

# use_package("spdep")
# use_package("sf")
# use_package("units")

#use_gpl_license(version = 3, include_future = TRUE)
#usethis::use_version()
#usethis::use_news_md()

# devtools::install_deps()
# devtools::run_examples()

document()
check()
build()

load_all()

install()

# build_manual()


devtools::check_win_release()

# rhub::validate_email(email="simonovska.r@gmail.com")
# results <-rhub::check_for_cran()
# usethis::use_cran_comments()
# usethis::use_github_action_check_standard()
devtools::check_win_devel()
#usethis::use_travis()
# rhub::check_on_linux()

# devtools::spell_check()
# goodpractice::gp()
#remotes::install_github("jumpingrivers/inteRgrate")
# inteRgrate::check_pkg()
# inteRgrate::check_lintr()
# inteRgrate::check_tidy_description()
# #usethis::use_tidy_description()
# inteRgrate::check_r_filenames()
# inteRgrate::check_gitignore()

##devtools::test()
#devtools::test_coverage()
# cv<-covr::package_coverage(type="all")
# covr::codecov(coverage = cv,token = "CODECOV_TOKEN=1fae9bd6-a066-4ee0-9798-8f1f8460ed8c")
#covr::codecov(token = "1fae9bd6-a066-4ee0-9798-8f1f8460ed8c")

devtools::release()
devtools::submit_cran()



# ### simplify  ### reduce size
# library("rgdal")
# ger<-readOGR(dsn="C:/Users/Rozeta/Documents/GitHub/RegionSim/inst/shape",
#              layer="gemeinde")
# library(rgeos)
# g2<-gSimplify(ger,tol=1000,topologyPreserve=TRUE)
#
#
# df = data.frame(ger)
#
# # Create a spatial polygon data frame (includes shp attributes)
# spdf = SpatialPolygonsDataFrame(g2, df)
#
# # Write to shapefile
#
# writeOGR(spdf,
#          layer = 'gemeinde',
#          'C:/Users/Rozeta/Documents/GitHub/RegionSim/inst/shape',
#          driver="ESRI Shapefile",
#          overwrite_layer=TRUE)
#
# #####
# rm(list=ls())
# ger<-readOGR(dsn="C:/Users/Rozeta/Documents/GitHub/RegionSim/inst/shape",
#              layer="kreise")
# library(rgeos)
# g2<-gSimplify(ger,tol=1000,topologyPreserve=TRUE)
#
#
# df = data.frame(ger)
#
# # Create a spatial polygon data frame (includes shp attributes)
# spdf = SpatialPolygonsDataFrame(g2, df)
#
# # Write to shapefile
#
# writeOGR(spdf,
#          layer = 'kreise',
#          'C:/Users/Rozeta/Documents/GitHub/RegionSim/inst/shape',
#          driver="ESRI Shapefile",
#          overwrite_layer=TRUE)

# ger<-st_read(dsn = "C:/Users/Rozeta/Documents/GitHub/RegionSim/inst/shape/gemeinde.shp")
# ger$pop<-ger$EWZ
# ger$area<-ger$KFL
# ger2<- ger %>% select(-EWZ,-KFL,-RS,-BEZ,-BEM)
# ger2$NUTS[which(ger2$NUTS %in% c("DE915", "DE919"))]<-"DE91C"
# ger2$NUTS[which(ger2$NUTS %in% c("DEB16"))]<-"DEB1C"
# ger2$NUTS[which(ger2$NUTS %in% c("DEB19"))]<-"DEB1D"
#
# st_write(ger2,"C:/Users/Rozeta/Documents/GitHub/RegionSim/inst/shape/gemeinde.shp",
#          delete_layer = TRUE)
#
# newreg<- ger2 %>% dplyr::select(NUTS,pop,area) %>%
#   dplyr::group_by(NUTS)  %>% dplyr::summarise(popNUTS3=sum(pop),areaNUTS3=sum(area))
#
# st_write(newreg,"C:/Users/Rozeta/Documents/GitHub/RegionSim/inst/shape/kreise.shp",
#          delete_layer = TRUE)
