#' @name popDistMat
#' @title Spatial Weights Matrix based on population and distance restrictions
#'
#' @description This function returns a spatial weights matrix,
#' for given population and distance cut-offs.
#'
#' @param distMat distance matrix
#' @param POPvec vector containing population information
#' @param maxdistCutOff maximum distance cut-off. Default = half of the maximal distance from the distance matrix.
#' @param distCutOff distance cut-off. Default = if missing, half of maxdistCutOff.
#' @param distCutOff2 distance cut-off. Default = a quarter of the maximal distance from the distance matrix.
#' @param distCutOff3 distance cut-off. Default = NULL
#' @param POPCutOff population cut-off. Default = half of the maximal population from the distance vector.
#' @param POPCutOff2 population cut-off. Default = NULL
#' @param rn logical, default FALSE. If TRUE, the weigth matrix will be row normalised
#'
#' @return
#' \describe{\emph{W}}  spatial weights matrix
#'
#' @author Rozeta Simonovska
#'
#' @examples
#' data(gN3dist) ##distance in metres
#' dist2 <- gN3dist/1000 ##distance in km
#' pop <- as.numeric(ger$population)
#' W1 <- popDistMat(dist2,POPvec=pop)
#'
#' @export

popDistMat<-function(distMat, POPvec,
                     distCutOff=NULL, maxdistCutOff=NULL, distCutOff2=NULL,
                     POPCutOff=NULL, POPCutOff2=NULL, rn=FALSE){
  if (isSymmetric(distMat) & all(diag(distMat) == 0)) {

    n <- nrow(distMat)
    if(length(POPvec)==n){


      if(is.null(maxdistCutOff)){maxdistCutOff <- max(distMat)/2 }
      if(is.null(distCutOff)){distCutOff <- maxdistCutOff/2 }
      if(is.null(POPCutOff)){POPCutOff <- max(POPvec)/2 }

      if(is.null(distCutOff2) & is.null(POPCutOff2) & maxdistCutOff<distCutOff){
          stop("Wrong values for distance or population restrictions! \n
               Enter maxdistCutOff>distCutOff2")
     }else if(!is.null(distCutOff2) & !is.null(POPCutOff2) &
              (maxdistCutOff<distCutOff || distCutOff2<distCutOff || distCutOff2>maxdistCutOff || POPCutOff<POPCutOff2)){
        stop("Wrong values for distance or population restrictions! \n  Enter maxdistCutOff>distCutOff2>distCutOff and POPCutOff>POPCutOff2")
      }

      W <- matrix(0, nrow = n, ncol = n); W1 <- matrix(0, nrow = n, ncol = n)
      for(i in 1:n){  W1[i,which(distMat[i,]!=0 & distMat[i,]<maxdistCutOff)]<-1 }
      for(i in 1:n){
        W[i,which(W1[i,]!=0 & distMat[i,]<distCutOff)]<-1
        W[i,which(W1[i,]!=0 & W[i,]==0 & POPvec>POPCutOff )]<-1  }
        if(!is.null(distCutOff2) & !is.null(POPCutOff2)){
          W[i,which(W1[i,]!=0 & distMat[i,]<distCutOff2 & POPvec[i]<POPCutOff2)]<-1 }

    } else{
      stop("Error in POPvec! Different lengths of distance matrix and Population vector.")
    }
  } else {
    stop("Error in distMat! Not a distance matrix.")
  }

  if(rn){ W<-rownor(W) }
  return(W)

}
