if(all(unlist(num_neb[[i]])==0)){ no_neb_dum[i]<-1 }
}
}
}
}
if(length( which(pop_nreg<min_n_pop & no_neb_dum==0))==0)     {break}
}##end repeat
##############################################
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n); all_neb<-vector()
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))}
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))}
################################
} ##end if just small regions
if(no_neb_dum[which(pop_nreg==min(pop_nreg))]==0){  ##If the region with min population still has available neighbours (for the case of small regions)
repeat{
###order based on population, starting with the region with the smallest number
for(i in which(pop_nreg<minpop & no_neb_dum==0)[
order(all_neb[which(pop_nreg<minpop & no_neb_dum==0)],
pop_nreg[which(pop_nreg<minpop & no_neb_dum==0)])]) {
if(pop_nreg[i]>minpop || no_neb_dum[i]==1){ next
} else{
neb_l<-list()
for(kk in 1:length(re[[i]])){ neb_l[[kk]]<-unlist(neigbs2[[re[[i]][kk]]])  }
neb_v<-unique(unlist(neb_l))
if(length(neb_v)==0){ next
}  else{
if(m>5000 & (m/n<50)){
pvar1<-neb_v[which(popvec[neb_v]==max(popvec[neb_v]))]
}else { pvar1<-as.numeric(sample(as.character(neb_v),1))  }
re[[i]]<-c(re[[i]],pvar1)
for (k in 1:m){ neigbs2[[k]]<-list(unlist(neigbs2[[k]])[!unlist(neigbs2[[k]]) %in% pvar1])}
ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))
pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){  no_neb_dum[i]<-1  }
}
}
}
}
if(length( which(pop_nreg<minpop & no_neb_dum==0))==0 || (
pop_nreg[which(pop_nreg==min(pop_nreg))]<min_n_pop & no_neb_dum[which(pop_nreg==min(pop_nreg))]==1)){break}
}##end repeat
}###end if
##############################################
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n); all_neb<-vector()
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))}
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))}
################################
nseed<-nseed+1
if(pop_nreg[which(pop_nreg==min(pop_nreg))]>min_n_pop || no_neb_dum[which(pop_nreg==min(pop_nreg))]==0){break}
} ### END repeat unit minimal population in each new region is over minpop (start =starting regions)
#######################################################################################################
nseed<-nseed-1
set.seed(nseed)
##############################################
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))}
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))}
if(m>5000 & (m/n<50) & avrpop/2>minpop){ ##just samll regions
repeat{
###order based on number of neigbours and population, starting with the region with the smallest population number
for(i in which(pop_nreg<avrpop/2 & no_neb_dum==0)[
order(all_neb[which(pop_nreg<(avrpop)/2 & no_neb_dum==0)],
pop_nreg[which(pop_nreg<(avrpop)/2 & no_neb_dum==0)])]) {
if(pop_nreg[i]>avrpop/2 || no_neb_dum[i]==1){ next
} else{
neb_l<-list()
for(kk in 1:length(re[[i]])){ neb_l[[kk]]<-unlist(neigbs2[[re[[i]][kk]]])  }
neb_v<-unique(unlist(neb_l))
if(length(neb_v)==0){ next
} else{
pvar1<-neb_v[which(popvec[neb_v]==max(popvec[neb_v]))]
re[[i]]<-c(re[[i]],pvar1)
for (k in 1:m){ neigbs2[[k]]<-list(unlist(neigbs2[[k]])[!unlist(neigbs2[[k]]) %in% pvar1])}
ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))
pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){  no_neb_dum[i]<-1  }
}
}
}
}
####
if(length(which(pop_nreg<avrpop/2 & no_neb_dum==0))==0) {break}
} ####END repeat avrpop/2
##############################################
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))}
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))}
################################
}###end if ## just small regions
repeat{
###order based on number of neigbours and population, starting with the region with the smallest number
for(i in which(pop_nreg<avrpop & no_neb_dum==0)[
order(all_neb[which(pop_nreg<avrpop & no_neb_dum==0)],
pop_nreg[which(pop_nreg<avrpop & no_neb_dum==0)])]) {
if(pop_nreg[i]>avrpop || no_neb_dum[i]==1){ next
} else{
neb_l<-list()
for(kk in 1:length(re[[i]])){ neb_l[[kk]]<-unlist(neigbs2[[re[[i]][kk]]])  }
neb_v<-unique(unlist(neb_l))
if(length(neb_v)==0){ next
} else{
if(m>5000 & (m/n<50)){
pvar1<-neb_v[which(popvec[neb_v]==max(popvec[neb_v]))]
}else { pvar1<-as.numeric(sample(as.character(neb_v),1))}
re[[i]]<-c(re[[i]],pvar1)
for (k in 1:m){ neigbs2[[k]]<-list(unlist(neigbs2[[k]])[!unlist(neigbs2[[k]]) %in% pvar1])}
ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))
pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){ no_neb_dum[i]<-1 }
}
}
}
}
####
if(length(which(pop_nreg<avrpop & no_neb_dum==0))==0)     {break}
} #####END repeat tot_pop/n
##############################################
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))}
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))}
################################
### adding regions based on population, (having) neigbours and area
set.seed(nseed)
##small and medium regions
if(m>250){
repeat{
###order based on population, starting with the region with the smallest number
for(i in which(ar_nreg<avrarea & pop_nreg<avrpop & no_neb_dum==0)[
order(pop_nreg[which(ar_nreg<avrarea & pop_nreg<avrpop & no_neb_dum==0)])]){
if(ar_nreg[i]>avrarea || pop_nreg[i]>avrpop || no_neb_dum[i]==1){next
} else{
neb_l<-list()
for(kk in 1:length(re[[i]])){  neb_l[[kk]]<-unlist(neigbs2[[re[[i]][kk]]])   }
neb_v<-unique(unlist(neb_l))
if(length(neb_v)==0){ next
} else{
pvar1<-neb_v[which(popvec[neb_v]==max(popvec[neb_v]))]
re[[i]]<-c(re[[i]],pvar1)
for (k in 1:m){ neigbs2[[k]]<-list(unlist(neigbs2[[k]])[!unlist(neigbs2[[k]]) %in% pvar1])}
ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))
pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){ no_neb_dum[i]<-1 }
}
}
}
}
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
if(length(which(ar_nreg<avrarea & pop_nreg<avrpop*2 & no_neb_dum==0))==0){break}
} ###END repeat ar_nreg<avrarea & pop_nreg<avrpop
########################
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))}
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))}
###############################
}####END if m>250 ##
set.seed(nseed)
##only small regions
if(m>5000 & (m/n<50)){
repeat{
###order based on population, starting with the region with the smallest number
for(i in which(ar_nreg<avrarea*2 & pop_nreg<avrpop*2 & no_neb_dum==0)[
order(pop_nreg[which(ar_nreg<avrarea*2 & pop_nreg<avrpop*2 & no_neb_dum==0)])]){
neb_l<-list()
for(kk in 1:length(re[[i]])){  neb_l[[kk]]<-unlist(neigbs2[[re[[i]][kk]]])   }
neb_v<-unique(unlist(neb_l))
if(length(neb_v)==0){ next
} else{
pvar1<-neb_v[which(popvec[neb_v]==max(popvec[neb_v]))]
re[[i]]<-c(re[[i]],pvar1)
for (k in 1:m){ neigbs2[[k]]<-list(unlist(neigbs2[[k]])[!unlist(neigbs2[[k]]) %in% pvar1])}
ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))
pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}
}
}
}
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
if(length(which(ar_nreg<avrarea*2 & pop_nreg<avrpop*2 & no_neb_dum==0))==0){break}
} ####END repeat avrarea*2 & pop_nreg<avrpop*2 #
########################
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))}
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))}
###############################
set.seed(nseed)
repeat{
###order based on population, starting with the region with the smallest number
for(i in which(ar_nreg<avrarea*2 & pop_nreg<maxpop & no_neb_dum==0)[
order(pop_nreg[which(ar_nreg<avrarea*2 & pop_nreg<maxpop & no_neb_dum==0)])]){
neb_l<-list()
for(kk in 1:length(re[[i]])){  neb_l[[kk]]<-unlist(neigbs2[[re[[i]][kk]]])   }
neb_v<-unique(unlist(neb_l))
if(length(neb_v)==0){ next
} else{
pvar1<-neb_v[which(popvec[neb_v]==max(popvec[neb_v]))]
re[[i]]<-c(re[[i]],pvar1)
for (k in 1:m){ neigbs2[[k]]<-list(unlist(neigbs2[[k]])[!unlist(neigbs2[[k]]) %in% pvar1])}
ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))
pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}
}
}
}
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
if(length(which(ar_nreg<avrarea*2 & pop_nreg<maxpop & no_neb_dum==0))==0){break}
}###END repeat  ar_nreg<avrarea*2 & pop_nreg<maxpop #
########################
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))}
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))}
}
############################################################################
set.seed(nseed)
if(length(unlist(re))!=m){
repeat{
###order based on population, starting with the region with the smallest number
for(i in which(pop_nreg<maxpop & no_neb_dum==0)[
order(all_neb[which(pop_nreg<maxpop & no_neb_dum==0)],
pop_nreg[which(pop_nreg<maxpop & no_neb_dum==0)])]) {
if(pop_nreg[i]>maxpop || no_neb_dum[i]==1){next
} else{
neb_l<-list()
for(kk in 1:length(re[[i]])){  neb_l[[kk]]<-unlist(neigbs2[[re[[i]][kk]]])   }
neb_v<-unique(unlist(neb_l))
if(length(neb_v)==0){ next
} else{
if(m>5000 & (m/n<50)){
pvar1<-neb_v[which(popvec[neb_v]==max(popvec[neb_v]))]
}else { pvar1<-as.numeric(sample(as.character(neb_v),1))}
re[[i]]<-c(re[[i]],pvar1)
for (k in 1:m){ neigbs2[[k]]<-list(unlist(neigbs2[[k]])[!unlist(neigbs2[[k]]) %in% pvar1])}
ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))
pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}
}
}
}
}
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
if(length(which(pop_nreg<maxpop & no_neb_dum==0))==0){break}
} ###END repeat pop_nreg<maxpop #
########################
no_neb_dum<-rep(0,n);num_neb<-rep(list(NA),n)
for(i in 1:n) {
for(kk in 1:length(re[[i]])){num_neb[[i]][kk]<-length(unlist(neigbs2[[re[[i]][kk]]]))}
all_neb[i]<-sum(num_neb[[i]])
if(all(unlist(num_neb[[i]])==0)){no_neb_dum[i]<-1}}
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[re[[i]]]))}
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[re[[i]]]))}
}###END IF
###### Adding the remaining areas to the newly created regions
### Create identifier for regions based on letters
bukvi<-vector()
for(bi in 1:(length(letters)+1)){for(bj in 1:(length(LETTERS))) {bukvi[bj+length(letters)*(bi-1)]<-paste0(letters[bi-1],LETTERS[bj])}}
if(n>length(bukvi)){
lbuk<-floor(n/length(bukvi))+1
bukvi2<-rep(NA,length(bukvi)*lbuk)
for(bi2 in 1:(length(bukvi))){
for(bj2 in 1:lbuk) {
bukvi2[bi2+length(bukvi)*(bj2-1)]<-paste0(bukvi[bi2],as.character(bj2-1))
}
}
bukvi<-bukvi2
}
bukvi<-bukvi[order(bukvi)]
for(i in 1:n){   sf_Agreg[which(sf_ID %in% re[[i]])]<-bukvi[i]}
### Adding the non-assained regions
set.seed(nseed)
if(length(unlist(re))!=m){
repeat{
no_reg<-which(!sf_Agreg %in% bukvi[1:n])
if(length(no_reg)<1)  { break
} else{
pvar2<-list(); pvar3<-list(); pvar4<-vector()
for(kk in 1:length(no_reg)){
pvar2[[kk]]<-unique(unlist(neigbs[[no_reg[kk]]])[!unlist(neigbs[[no_reg[kk]]]) %in% unlist(neigbs2[[no_reg[kk]]])])
pvar3[[kk]]<-unique(unlist(pvar2[[kk]][!unlist(pvar2[[kk]]) %in% no_reg]))
pvar4[kk]<-length(unlist(unlist(pvar3[[kk]])))
}
pvarl<-pvar3; pvar5<-vector()
for(ik in which(pvar4!=0)){
for(il in 1:length(pvar3[[ik]])){
if(pop_nreg[which(bukvi==sf_Agreg[unlist(pvar3[[ik]][il])])]>=avrpop){
pvarl[[ik]]<-pvarl[[ik]][!pvar3[[ik]] %in% pvar3[[ik]][il]]
pvarl[[ik]]<-pvarl[[ik]][!is.na(pvarl[[ik]])]
}}
}
for(kk in 1:length(no_reg)){pvar5[kk]<-length(unlist(unlist(pvarl[[kk]])))}
if(length(which(pvar5!=0))>0){
pvar6<-as.numeric(sample(as.character(which(pvar5!=0)),1))
pom4<-as.numeric(sample(as.character(pvarl[[pvar6]]),1))
} else{
pvar6<-as.numeric(sample(as.character(which(pvar4!=0)),1))
pom5<-vector()
for(im in 1:length(pvar3[[pvar6]])){  pom5[im]<-pop_nreg[which(bukvi==sf_Agreg[pvar3[[pvar6]][im]])]}
pom4<-pvar3[[pvar6]][which(pom5==min(pom5))][1]
}
sf_Agreg[no_reg[pvar6]]<-sf_Agreg[pom4]
for (k in 1:m){ neigbs2[[k]]<-list(unlist(neigbs2[[k]])[!unlist(neigbs2[[k]]) %in% no_reg[pvar6]])}
}
}###END Repeat
}
ar_nreg<-rep(NA,n)
for (i in 1:n){ar_nreg[i]<-as.numeric(sum(areavec[which(sf_Agreg==bukvi[i])]))}
pop_nreg<-rep(NA,n)
for (i in 1:n){pop_nreg[i]<-as.numeric(sum(popvec[which(sf_Agreg==bukvi[i])]))}
###################################################################################
###################################################
###############################
new_reg_id<-vector()
for(ij in 1:m) {new_reg_id[ij]<-which(sf_Agreg[ij]==bukvi)}
poly <- gBuffer(sf_pol, byid=TRUE, width=0)
newreg<-maptools::unionSpatialPolygons(poly,new_reg_id)
######################################################
if(outpv){
varbl<-list(ar_nreg,pop_nreg,new_reg_id,nseed); names(varbl)<-c("sf_ar","sf_pop","new_reg_id","nseed")
all_rez<-list(newreg,varbl)
names(all_rez)<-c("newreg","varbl")
return(all_rez)
} else{ return(newreg)}
}
rm(;list=ls())
rm(list=ls())
library(devtools)
document()
usethis::use_package("maptools")
document()
document()
check()
usethis::use_package("rgdal",type="Suggests")
usethis::use_package("spdep",type="Suggests")
document()
usethis::use_package("rgeos")
document()
usethis::use_data(sf_mun_cen_dist, overwrite = TRUE)
usethis::use_data(GerMunData)
usethis::use_data(sf_AREA)
document()
tools::checkRdaFiles()
document()
document()
load("C:/Users/Rozeta/Desktop/I paper analysis/R Package creating regions/RegionSim/data/n_reg.rda")
load("C:/Users/Rozeta/Desktop/I paper analysis/R Package creating regions/RegionSim/data/sf_AREA.rda")
load("C:/Users/Rozeta/Desktop/I paper analysis/R Package creating regions/RegionSim/data/sf_mun_cen_dist.rda")
load("C:/Users/Rozeta/Desktop/I paper analysis/R Package creating regions/RegionSim/data/sf_POPULATION.rda")
st_n_reg<-n_reg
GerMunData<-list(sf_mun_cen_dist,sf_POPULATION,sf_AREA,st_n_reg)
usethis::use_data(GerMunData)
names(GerMunData)<-c("sf_mun_cen_data","sf_POPULATION","sf_AREA,"st_n_reg")
names(GerMunData)<-c("sf_mun_cen_data","sf_POPULATION","sf_AREA","st_n_reg")
GerMunData$sf_AREA
usethis::use_data(GerMunData, overwrite = TRUE)
rm(list=ls())
ger<-readOGR(system.file(dsn="shape",package="RegionSim"),layer="gemeinde2016")
library("rgdal")
ger<-readOGR(system.file(dsn="shape",package="RegionSim"),layer="gemeinde2016")
crs(ger)
library(sp)
crs(ger)
class(ger)
library("rgeos")
library("rgdal")
library("raster")
crs(ger)
rm(list = ls())
##### read the shape file for German municipalities
library(sf)
library(sp)
library("rgeos")
library("rgdal")
library("raster")
sf_mun_polyg1<-readOGR(dsn="C:/Users/Rozeta/Desktop/I paper analysis/PAPER ANALYSIS/shapefiles/gemeinde2016",layer="gemeinde2016")
sf_mun_polyg<-spTransform(sf_mun_polyg1,"+init=epsg:3035")
?spTransform
?sp_transform
writeOGR(obj=sf_mun_polyg, dsn="C:/Users/Rozeta/Desktop", layer="gemeinde")
writeOGR(obj=sf_mun_polyg, dsn="C:/Users/Rozeta/Desktop", layer="gemeinde", driver="ESRI Shapefile")
?writeOGR
writeOGR(obj=sf_mun_polyg, dsn="C:/Users/Rozeta/Desktop", layer="gemeinde",encoding = "UTF-8", driver="ESRI Shapefile")
writeOGR(obj=sf_mun_polyg, dsn="C:/Users/Rozeta/Desktop/New folder", layer="gemeinde",encoding = "UTF-8", driver="ESRI Shapefile")
View(sf_mun_polyg1)
crs(sf_mun_polyg1)
crs(sf_mun_polyg)
sf_mun_polyg_lonlat<-spTransform(sf_mun_polyg1,"+init=epsg:4326")
writeOGR(obj=sf_mun_polyg_lonlat, dsn="C:/Users/Rozeta/Desktop/New folder", layer="gemeinde2",encoding = "UTF-8", driver="ESRI Shapefile")
gemeinde<-sf_mun_polyg
ger<-readOGR(system.file(dsn="shape",package="RegionSim"),layer="gemeinde2016")
ger<-readOGR(system.file(dsn="shape",package="RegionSim"),layer="gemeinde")
ger2<-readOGR(system.file(dsn="shape",package="RegionSim"),layer="GermanyNUTS3")
crs(ger2)
sf_mun_polyg22<-spTransform(ger2,"+init=epsg:3035")
writeOGR(obj=sf_mun_polyg22, dsn="C:/Users/Rozeta/Desktop/New folder", layer="kreise",encoding = "UTF-8", driver="ESRI Shapefile")
rm(list=ls())
?gCentroid
ger<-readOGR(system.file(dsn="shape",package="RegionSim"),layer="gemeinde")
cen_sf<-gCentroid(ger,byid = TRUE)
View(ger)
View(ger)
dis <- dist(cen_sf)
dis <- raster:pointDistance(cen_sf,lonlat=FALSE)
dis <- raster:pointDistance(cen_sf@coords,lonlat=FALSE)
dis <- geosphere::distm(cen_sf@coords,lonlat=FALSE)
dis <- geosphere::distm(cen_sf@coords)
distGeo(c(0,0),c(90,90))
geosphere::distGeo(c(0,0),c(90,90))
View(cen_sf)
gCentroid()
?gCentroid
rm(list=ls())
load("C:/Users/Rozeta/Desktop/I paper analysis/R Package creating regions/other/n_reg.rda")
load("C:/Users/Rozeta/Desktop/I paper analysis/R Package creating regions/other/sf_AREA.rda")
load("C:/Users/Rozeta/Desktop/I paper analysis/R Package creating regions/other/sf_POPULATION.rda")
st_n_reg<-n_reg
GerMunData<-list(sf_POPULATION,sf_AREA,st_n_reg)
names(GerMunData)<-c("sf_POPULATION","sf_AREA","st_n_reg")
GerMunData$sf_POPULATION
rm(n_reg,sf_AREA,sf_POPULATION,st_n_reg)
usethis::use_data(GerMunData, overwrite = TRUE)
usethis::use_package("geosphere",type="Suggests")
document()
library(devtools)
document()
check()
load("C:/Users/Rozeta/Desktop/I paper analysis/R Package creating regions/RegionSim/data/GerMunData.rda")
tot_ar <- sum(GerMunData$sf_AREA)
areavec[1:10]
GerMunData$sf_AREA[1:10]
sqrt(tot_ar/401)
rm(list=ls())
document()
build()
c
check()
check()
library(devtools)
check()
